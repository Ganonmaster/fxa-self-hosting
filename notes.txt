* Hosting options:

1) including webserver (just need DNR, DNS, Ubuntu 15.10)
2) just moz.domain.com (just need Docker) if you already run a primary IDP, or have an account at Mozilla's secondary IDP

# Services mapping:

accounts.firefox.com -443-> fxa-content-server
 = 127.0.0.1:3030             * PUBLIC_URL= 'https://fxa.michielbdejong.com:3030'
                              * FXA_URL= 'https://fxa.michielbdejong.com:9000'

oauth.accounts.firefox.com -443-> fxa-oauth-server
 = 127.0.0.1:9010
 = 9011? private?

profile.accounts.firefox.com -443-> fxa-profile-server
 = 127.0.0.1:1111

api.accounts.firefox.com -443-> fxa-auth-server
 - 127.0.0.1:9000                 * PUBLIC_URL= 'https://fxa.michielbdejong.com:9000'
                                  * HTTPDB_URL= 'https://fxa.michielbdejong.com:8000'

# Internal:
* fxa-auth-db-mysql
* mailer

* run fxa-content-server with letsencrypt on https://fxa.michielbdejong.com/
* run fxa-auth-server with letsencrypt on https://fxa.michielbdejong.com:9000/


docker run -d \
           -e "HOST=0.0.0.0" \
           --name httpdb fxa-auth-db-mysql

docker run -d \
           --name verifier.local \
           -e "IP_ADDRESS=0.0.0.0" \
           -e "PORT=5050" \
           -e "INSECURE_SSL=true" \
           browserid-verifier


docker run -d \
           -p 3030:3030 \
           -v /root/fxa-cert:/fxa-cert \
           -e "PUBLIC_URL=https://fxa.michielbdejong.com:3030" \
           -e "FXA_URL=https://fxa.michielbdejong.com:9000" \
           -e "FXA_OAUTH_URL=https://fxa.michielbdejong.com:9010" \
           -e "FXA_PROFILE_URL=https://fxa.michielbdejong.com:1111" \
           -e "USE_TLS=true" \
           -e "TLS_KEY_PATH=/fxa-cert/privkey.pem" \
           -e "TLS_CERT_PATH=/fxa-cert/cert.pem" \
           -e "REDIRECT_PORT=3031" \
            fxa-content-server

docker run -d \
           --link="httpdb" \
           -p 9000:9000 \
           -v /root/fxa-cert:/fxa-cert \
           -e "IP_ADDRESS=0.0.0.0" \
           -e "PUBLIC_URL=https://fxa.michielbdejong.com:9000" \
           -e "HTTPDB_URL=http://httpdb:8000" \
           -e "USE_TLS=true" \
           -e "TLS_KEY_PATH=/fxa-cert/privkey.pem" \
           -e "TLS_CERT_PATH=/fxa-cert/cert.pem" \
           fxa-auth-server


docker run -d \
           --link="verifier.local" \
           -p 9010:9010 \
           -v /root/fxa-cert:/fxa-cert \
           -e "PUBLIC_URL=https://fxa.michielbdejong.com:9010" \
           -e "HOST=0.0.0.0" \
           -e "CONTENT_URL=https://fxa.michielbdejong.com:3030/oauth/" \
           -e "VERIFICATION_URL=http://verifier.local:5050/v2" \
           fxa-oauth-server

 docker run -d \
            --name profile \
            -e "PUBLIC_URL=https://fxa.michielbdejong.com:1111" \
            -e "AUTH_SERVER_URL=https://fxa.michielbdejong.com:9000" \
            -e "OAUTH_SERVER_URL=https://fxa.michielbdejong.com:9010" \
            -e "IMG=local" \
            -e "HOST=0.0.0.0" \
            fxa-profile-server

docker run -d \
           --name sync \
           syncserver

docker run -d \
           --name syncto \
           syncto

docker run -d \
           --link="profile" \
           -p 1111:1111 \
           --link="sync" \
           -p 5000:5000 \
           --link="syncto" \
           -p 8000:8000 \
           -v /root/fxa-cert:/fxa-cert \
           fxa-self-hosting



* Sign up on https://fxa.michielbdejong.com:3030/, and instead of going to look
for the verification email, find the id of your fxa-auth-db-mysql container (in
my case `aeb`), and run:

 docker exec -it aeb mysql -e "USE fxa; UPDATE accounts SET emailVerified=1;"

to mark your email address as verified.

* If you get https://fxa.michielbdejong.com:3030/unexpected_error, run
localStorage.clear() in the console and hard-refresh.

* TODO: get email working, trying in fxa-auth-server with:
           -e "SMTP_HOST=smtp.********.net" \
           -e "SMTP_PORT=587" \
           -e "SMTP_SECURE=true" \
           -e "SMTP_USER=********" \
           -e "SMTP_PASS=`********" \

* TODO: browserid assertion is invalid

* TODO: redo the whole setup on a fresh server, and document each step
